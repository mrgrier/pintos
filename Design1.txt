
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Montana Grier mrgrier@k-state.edu
Austin Fangman apfangman@k-state.edu
Adam Seiwert seiwerta@k-state.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

We drew inspiration from this github repository for priority scheduling.
https://github.com/ryantimwilson/Pintos-Project-1


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread was changed to include an int64_t called sleep_ticks
-This is the ammount of ticks that the thread needs to sleep

static struct list sleep_list
-List of threads that have been put to sleep.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep is called, we disable interrupts to handle the call atomically,
assign the current threads sleep_ticks member to be the current tick count plus 
the ticks it needs to sleep for, put a handle to the thread into our sleep_list 
(which is ordered by ticks low-to-high), and block that thread.

The interrupt handler inspects items in the list of sleeping threads (starting with 
the thread that will complete soonest), and unblocks threads that have slept long
enough.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The interrupt handler only navigates and evaluates items in the sleep_list
until no remaining threads are eligible to be unblocked.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Interrupts are disabled before work is done in timer_sleep.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Because we have maintained a list of sleeping threads, we do not need to make a 
call to thread_current().

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

This design requires maintaining a list, which is extra overhead. However, because 
we maintain an order in the list, we do not spend much time sorting or cleaning up
its contents.

We initially considered an algorithm that used thread_foreach and a helper function
to evaluate whether each thread in the global all_list had slept for enough ticks.

This caused some threads to unblock when our locks, semaphores, and condition variables
needed/assumed them to be blocked, causing kernel panics.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We keep the existing list of ready-to-run threads, ready_list, in order by thread 
priority. This means that we can easily evaluate the current thread's priority
and yield to a thread with a higher priority. This check is made on thread creation,
when we change the priority of a thread, and when semaphores are released.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

We currently do not have priority donation implemented.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

We disable interrupts to achieve atomicity in thread_set_priority().

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

While we have added no new structs or struct members, we did change existing list
insertions to maintain an order based on either the priority of a thread or a 
semaphore.


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

